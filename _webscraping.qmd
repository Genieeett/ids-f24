## Web Scraping

This section was written by Melanie Desroches, a senior majoring in statistics and minoring in computer science.
The goal of this section is to introduce web-scraping so that it can be utilized for data science. This will 
include what web-scraping is, how to web-scrape with Python using examples, and how to web-scrape ethically.

### What is Web-Scraping

As data scientists, we often want to collect data from a variety of sources. In the age of the internet, a lot 
of the data we may want to collect is available on a website. However, this data is often times not available 
in an easily downloadable format. This is where web-scraping becomes valuable. Web-scraping is an automated 
process used to gather data from websites. This allows us to access and collect large amounts of data directly 
from web pages if the information is not avalible for download.

Websites are primarily structured with HTML (Hypertext Markup Language), which organizes and displays content. 
Web scrapers parse through this HTML code to identify and extract relevant information. Therefore, it important 
to have a basic understanding of HTML in order to identify what part of the website you are trying to scrape.
The contents of a web page are broken up and identified by elements. Here are some examples of common elements that are 
important for web-scraping:

- `<body>` : identifies the website body
- `<table>` : identifies a table
- `<tbody>` : identifies the body of the table
- `<tr>` : indentifies the row of a table

### How to Web-Scrape with Python

There are many ways to web-scrape with Python. We will cover the two main packages, Beautiful Soup 
and Selenium.

#### Beautiful Soup

The Beautiful Soup Python Library simplifies the process of parsing and navigating HTML and XML documents, making it easier 
to extract data from websites. Beautiful Soup is ideal for scraping data from static websites. Static websites do not change 
based on user actions or require server-side interactions to update content dynamically. Basically, what you see is what you get.
Static websites tend to be pretty simple so scraping from them is relatively easy.

Beautiful Soup can be installed by running
```
pip install beautifulsoup4
```

#### Selenium

#### Beautiful Soup vs Selenium

#### A Step-by Step Guide to Web-Scraping


### Examples using NYC Open Data

#### Beautiful Soup and NYPD Precincts

#### Selenium and Weather Data


### A Note on Data Ethics 

#### Why Web-Scraping can be un-ethical

#### Some Tips to Help You Scrape Ethically